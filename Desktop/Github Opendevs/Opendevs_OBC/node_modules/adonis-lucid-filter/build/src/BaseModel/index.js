"use strict";
/*
 * adonis-lucid-filter
 *
 * (c) Lookin Anton <lookin@lookinlab.ru>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var BaseModelFilter_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseModelFilter = void 0;
/// <reference path="../../adonis-typings/index.ts" />
const camelCase_1 = __importDefault(require("lodash/camelCase"));
function StaticImplements() {
    return (_t) => { };
}
/**
 * Class to filtering AdonisJS Lucid ORM
 *
 * @class BaseModelFilter
 * @constructor
 */
let BaseModelFilter = BaseModelFilter_1 = class BaseModelFilter {
    constructor($query, $input) {
        this.$query = $query;
        this.$input = $input;
        this.$input = BaseModelFilter_1.removeEmptyInput(this.$input);
        this.$blacklist = this.constructor.blacklist;
    }
    handle() {
        if (this.setup && typeof this.setup === 'function') {
            this.setup(this.$query);
        }
        this.$filterByInput();
        return this.$query;
    }
    whitelistMethod(method) {
        const index = this.$blacklist.indexOf(method);
        if (~index) {
            this.$blacklist.splice(index, 1);
        }
        return !!~index;
    }
    $filterByInput() {
        for (const key in this.$input) {
            const method = this.$getFilterMethod(key);
            const value = this.$input[key];
            if (this.$methodIsCallable(method)) {
                this[method](value);
            }
        }
    }
    $getFilterMethod(key) {
        const methodName = this.constructor.dropId ? key.replace(/^(.*)(_id|Id)$/, '$1') : key;
        return this.constructor.camelCase ? (0, camelCase_1.default)(methodName) : methodName;
    }
    static removeEmptyInput(input) {
        const filteredInput = {};
        for (let key in input) {
            const value = input[key];
            if (value !== '' && value !== null && value !== undefined) {
                filteredInput[key] = value;
            }
        }
        return filteredInput;
    }
    $methodIsCallable(method) {
        return !!this[method] &&
            typeof this[method] === 'function' &&
            !this.$methodIsBlacklisted(method);
    }
    $methodIsBlacklisted(method) {
        return this.$blacklist.includes(method);
    }
};
BaseModelFilter.blacklist = [];
BaseModelFilter.dropId = true;
BaseModelFilter.camelCase = true;
BaseModelFilter = BaseModelFilter_1 = __decorate([
    StaticImplements(),
    __metadata("design:paramtypes", [Object, Object])
], BaseModelFilter);
exports.BaseModelFilter = BaseModelFilter;
exports.default = BaseModelFilter;
